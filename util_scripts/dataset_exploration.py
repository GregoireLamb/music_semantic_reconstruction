import osimport sys# Add the parent directory to the system pathsys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))import pandas as pdfrom mung.io import read_nodes_from_filefrom tqdm import tqdmdef append_or_overwrite_sheet(file_path, df, sheet_name, append_to_sheet=False):    if os.path.isfile(file_path):        writer = pd.ExcelWriter(file_path, engine='openpyxl', mode='a', if_sheet_exists='replace')        if append_to_sheet and sheet_name in pd.ExcelFile(file_path).sheet_names:            my_excel = pd.read_excel(file_path, sheet_name=sheet_name)            df = pd.concat([my_excel, df], ignore_index=True)    else:        writer = pd.ExcelWriter(file_path, engine='openpyxl')    df.to_excel(writer, sheet_name=sheet_name, index=False)    writer.close()excel_output = "./util_scripts/results/dataset_exploration.xlsx"# dataset_names = ["musigraph", "muscima-pp", "doremi"]dataset_names = ["doremi_measure_cut", "muscima_measure_cut"]configs = []datasets_list = []summary_df = {}raw_dir_dict = {"muscima_measure_cut": "./data/muscima-pp/measure_cut/data/annotations/",                "muscima-pp": "./data/muscima-pp/v2.1/data/annotations/",                "doremi": "./data/DoReMi_v1/Parsed_by_page_omr_xml/",                "doremi_measure_cut": "./data/DoReMi_v1/measure_cut/Parsed_by_measure_omr_xml/",                "musigraph": "./data/MUSIGRAPH/xml/"}for dataset in dataset_names:    raw_paths = os.listdir(raw_dir_dict[dataset])    num_samples = len(raw_paths)    label_count_dict = {}    link_count_dict = {}    for score in (pbar := tqdm(raw_paths)):        pbar.set_description(f"Analyse {dataset}")        nodes_list = read_nodes_from_file(raw_dir_dict[dataset] + score)        id2class = {node.id: node.class_name for node in nodes_list}        for node in nodes_list:            if node.class_name not in label_count_dict:                label_count_dict[node.class_name] = 0            label_count_dict[node.class_name] += 1            for link_endpoint in node.outlinks:                key = f"{node.class_name} - {id2class[link_endpoint]}"                if key not in link_count_dict:                    link_count_dict[key] = 0                link_count_dict[key] += 1    df1 = pd.DataFrame(list(label_count_dict.items()), columns=['Key', 'Count']).sort_values(by='Count',                                                                                             ascending=False)    df2 = pd.DataFrame(list(link_count_dict.items()), columns=['Key', 'Count']).sort_values(by='Count',                                                                                            ascending=False)    total_labels = df1['Count'].sum()    total_links = df2['Count'].sum()    n_labels_type = len(df1)    n_links_type = len(df2)    summary_df[dataset] = (dataset, num_samples, total_labels, total_links, n_labels_type, n_links_type)    # save the results in a file    append_or_overwrite_sheet(excel_output, df1, f'{dataset}_labels')    append_or_overwrite_sheet(excel_output, df2, f'{dataset}_links')summary_df = pd.DataFrame(summary_df, index=['dataset', 'num_samples', 'total_labels', 'total_links', 'n_labels_type',                                             'n_links_type']).Tappend_or_overwrite_sheet(excel_output, summary_df, 'AA_summary', append_to_sheet=True)